{
  "version": 3,
  "sources": ["monkeyPatches.ts"],
  "sourcesContent": ["export var initArrayWrappedForEach = (\n  widthNum: number,\n  cellWidth: number,\n  heightNum: number,\n  cellHeight: number,\n): typeof Uint8Array.prototype.wrappedForEach => {\n  return function wrappedForEach(callback) {\n    for (\n      var i = 0, j = 0, rowOffset = 0;\n      i < widthNum && j < heightNum;\n      i + 1 === widthNum\n        ? (i = 0, j++, rowOffset += widthNum)\n        : i++\n    ) {\n      callback({\n        cells: this,\n        currentIndex: i + rowOffset,\n        i,\n        j,\n        widthNum,\n        heightNum,\n        cellWidth,\n        cellHeight,\n      });\n    }\n  };\n};\n\nexport var shuffle = (array, first = 0, last = array.length - 1) => {\n  var result: string[] = [];\n  while(last-- >= first) {\n    const j = Math.floor(Math.random() * (last + 1));\n    [array[last], array[j]] = [array[j], array[last]];\n    result.push(array[last]);\n  }\n  return result;\n};"],
  "mappings": "MAAO,IAAIA,EAA0B,CACnCC,EACAC,EACAC,EACAC,IAEO,SAAwBC,EAAU,CACvC,QACMC,EAAI,EAAGC,EAAI,EAAGC,EAAY,EAC9BF,EAAIL,GAAYM,EAAIJ,EACpBG,EAAI,IAAML,GACLK,EAAI,EAAGC,IAAKC,GAAaP,GAC1BK,IAEJD,EAAS,CACP,MAAO,KACP,aAAcC,EAAIE,EAClB,EAAAF,EACA,EAAAC,EACA,SAAAN,EACA,UAAAE,EACA,UAAAD,EACA,WAAAE,CACF,CAAC,CAEL,EAGSK,EAAU,CAACC,EAAOC,EAAQ,EAAGC,EAAOF,EAAM,OAAS,IAAM,CAElE,QADIG,EAAmB,CAAC,EAClBD,KAAUD,GAAO,CACrB,IAAMJ,EAAI,KAAK,MAAM,KAAK,OAAO,GAAKK,EAAO,EAAE,EAC/C,CAACF,EAAME,CAAI,EAAGF,EAAMH,CAAC,CAAC,EAAI,CAACG,EAAMH,CAAC,EAAGG,EAAME,CAAI,CAAC,EAChDC,EAAO,KAAKH,EAAME,CAAI,CAAC,CACzB,CACA,OAAOC,CACT",
  "names": ["initArrayWrappedForEach", "widthNum", "cellWidth", "heightNum", "cellHeight", "callback", "i", "j", "rowOffset", "shuffle", "array", "first", "last", "result"]
}
