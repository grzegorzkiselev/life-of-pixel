{
  "version": 3,
  "sources": ["monkeyPatches.ts", "script.ts"],
  "sourcesContent": ["export var initArrayWrappedForEach = (\n  widthNum: number,\n  cellWidth: number,\n  canvasWidth: number,\n  heightNum: number,\n  cellHeight: number,\n): typeof Uint8Array.prototype.wrappedForEach => {\n  return function wrappedForEach(callback) {\n    for (\n      var i = 0, j = 0, rowOffset = 0;\n      i < widthNum && j < heightNum;\n      i + 1 === widthNum\n        ? (i = 0, j++, rowOffset += widthNum)\n        : i++\n    ) {\n      callback({\n        cells: this,\n        currentIndex: i + rowOffset,\n        i,\n        j,\n        widthNum,\n        canvasWidth,\n        heightNum,\n        rowOffset,\n        cellWidth,\n        cellHeight,\n      });\n    }\n  };\n};\n\nexport function shuffle(first = 0, last = this.length - 1) {\n  var result: string[] = [];\n  while(last-- >= first) {\n    const j = Math.floor(Math.random() * (last + 1));\n    [this[last], this[j]] = [this[j], this[last]];\n    result.push(this[last]);\n  }\n  return result;\n}", "import { initArrayWrappedForEach, shuffle } from \"./monkeyPatches.ts\";\n\nArray.prototype.shuffle = shuffle;\n\nvar bgc = \"#ebebe1\";\ndocument.body.style.backgroundColor = bgc;\nvar canvas = <HTMLCanvasElement>document.getElementById(\"ca\");\nvar context = <CanvasRenderingContext2D>canvas.getContext(\"2d\", { willReadFrequently: true });\nvar resolutionInput = <HTMLInputElement>document.getElementById(\"resolution\");\n\nvar pr = 0;\nvar getCanvasSide = () => (\n  window.innerWidth < window.innerHeight\n    ? window.innerWidth * pr\n    : window.innerHeight * pr\n);\n\nvar currentResolution = 0;\nvar currentImage: HTMLImageElement | null = null;\nvar isImageLoaded = false;\n\nvar updateResolution = (canvasWidth, canvasHeight, resolution) => {\n  currentResolution = Number(resolution);\n\n  var widthNum = currentResolution;\n  var heightNum = currentResolution;\n\n  var cellWidth = canvasWidth / widthNum;\n  var cellHeight = canvasHeight / heightNum;\n\n  var sideDivider = isImageLoaded === false\n    ? 1\n    : currentResolution / canvasWidth;\n\n  return {\n    widthNum,\n    cellWidth,\n    heightNum,\n    cellHeight,\n    sideDivider,\n  };\n};\n\nvar mask = {\n  empty: 0b0,\n  alive: 0b10000,\n  dead: 0b01111,\n  aliveNext: 0b01000,\n  deadNext: 0b10111,\n  n: 0b00111,\n  dropN: 0b11000,\n};\n\nvar getColorIndicesByCoordinates = (i, j, imageNaturalWidth) => {\n  var red = j * (imageNaturalWidth * 4) + i * 4;\n  return [red, red + 1, red + 2, red + 3];\n};\n\nvar generateCellsCallback = (rgbArray, widthNum, canvasWidth, heightNum, _, sideDivider) => {\n  var i = 0;\n  var j = 0;\n\n  var cells = new Uint8Array(\n    Array.from(\n      { length: widthNum * heightNum },\n      () => {\n        i + 1 === widthNum\n          ? (i = 0, j++)\n          : i++;\n\n        return rgbArray[getColorIndicesByCoordinates(\n          Math.floor(i / sideDivider),\n          Math.floor(j / sideDivider),\n          canvasWidth,\n        )[0]] < 129\n          ? mask.alive\n          : mask.empty;\n      }\n    )\n  );\n\n  return cells;\n};\n\nvar isCellAliveInNextGenerationCallback = ({\n  cells,\n  currentIndex,\n  i,\n  j,\n  widthNum,\n  heightNum,\n}) => {\n  var current = cells[currentIndex];\n\n  var nc = 0;\n\n  ((i - 1) > 0\n      && cells[currentIndex - 1] & mask.alive)\n      && nc++;\n\n  ((i + 1) < widthNum\n      && cells[currentIndex + 1] & mask.alive)\n      && nc++;\n\n  ((j - 1) > 0\n      && cells[currentIndex - widthNum] & mask.alive)\n      && nc++;\n\n  ((j + 1) < heightNum\n      && cells[currentIndex + widthNum] & mask.alive)\n      && nc++;\n\n  cells[currentIndex] = (\n    (nc === 1 || nc === 3)\n      ? current | mask.aliveNext\n      : current & mask.deadNext\n  ) | nc;\n};\n\nvar colorSet = [\n  // \"#f0ba00\",\n  // \"#de8790\",\n  // \"#6b1f1c\",\n  // \"#333c7d\",\n  // \"#367148\",\n  // \"#91b9d6\",\n  // \"#aa2404\"\n  new Uint8Array([255, 0, 0, 255]),\n  new Uint8Array([0, 255, 0, 255]),\n  new Uint8Array([0, 0, 255, 255]),\n  new Uint8Array([255, 255, 0, 255]),\n  new Uint8Array([0, 255, 255, 255]),\n  new Uint8Array([255, 0, 255, 255]),\n];\n\nvar palette = colorSet.shuffle(0, 5);\n\nvar imageArray;\n// var imageBuff = new Uint8ClampedArray();\n\nvar drawCellsCallback = ({\n  currentIndex,\n  cells,\n  cellWidth,\n  cellHeight,\n  canvasWidth,\n  i,\n  j,\n}) => {\n  var current = cells[currentIndex];\n\n  // current & mask.alive\n  // && (\n  //   context.fillStyle = palette[current & mask.n],\n  //   context.fillRect(\n  //     i * cellWidth,\n  //     j * cellHeight,\n  //     cellWidth,\n  //     cellHeight,\n  //   )\n  // );\n\n  for (var offsetW = 0; offsetW < cellWidth; offsetW++) {\n    for (var offsetH = 0; offsetH < cellWidth; offsetH++) {\n      var indices = getColorIndicesByCoordinates(\n        Math.floor(i * cellWidth) + offsetW,\n        Math.floor(j * cellWidth) + offsetH,\n        canvasWidth\n      );\n\n      if (current & mask.alive) {\n        var currentColor = palette[current & mask.n];\n        imageArray[indices[0]] = currentColor[0]; // 0 * 4 = 0\n        imageArray[indices[1]] = currentColor[1]; // 0 * 4 + 1 = 1\n        imageArray[indices[2]] = currentColor[2]; // 0 * 4 + 2 = 2\n        imageArray[indices[3]] = currentColor[3]; // 0 * 4 + 3 = 3\n      } else {\n        imageArray[indices[0]] = 0;\n        imageArray[indices[1]] = 0;\n        imageArray[indices[2]] = 0;\n        imageArray[indices[3]] = 0;\n      }\n\n      // if (current & mask.alive) {\n      //   var currentColor = palette[current & mask.n];\n      //   // imageArray[indices[0] - step] = currentColor[0]; // 0 * 4 = 0\n      //   // imageArray[indices[1] - step] = currentColor[1]; // 0 * 4 + 1 = 1\n      //   // imageArray[indices[2] - step] = currentColor[2]; // 0 * 4 + 2 = 2\n      //   // imageArray[indices[3] - step] = currentColor[3]; // 0 * 4 + 3 = 3\n      //   imageArray[indices[0]] = 255; // 0 * 4 = 0\n      //   imageArray[indices[1]] = 0; // 0 * 4 + 1 = 1\n      //   imageArray[indices[2]] = 0; // 0 * 4 + 2 = 2\n      //   imageArray[indices[3]] = 255; // 0 * 4 + 3 = 3\n\n    // } else {\n    //   imageArray[indices[0]] = 0;\n    //   imageArray[indices[1]] = 0;\n    //   imageArray[indices[2]] = 0;\n    //   imageArray[indices[3]] = 0;\n    // }\n    }\n  }\n  // }\n\n  cells[currentIndex] =\n    (current & mask.aliveNext)\n      ? (current | mask.alive) & mask.dropN\n      : mask.empty;\n};\n\n// var resetGenerationCallback = ({\n//   cells,\n//   currentIndex,\n// }) => {\n//   cells[currentIndex] =\n//     (cells[currentIndex] & mask.aliveNext)\n//       ? (cells[currentIndex] | mask.alive)\n//       : mask.empty;\n// };\n\nvar resizeCanvas = (width, height, pr) => {\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.width = width / pr + \"px\";\n  canvas.style.height = height / pr + \"px\";\n};\n\nvar clock = Date.now();\nvar fps = 4;\nvar frameDuration = 1000 / fps;\nvar currentRafId = 0;\n\nvar drawCallback = (cells, canvasWidth, canvasHeight) => {\n  var currentTime = Date.now();\n\n  if (currentTime - clock >= frameDuration) {\n    cells.wrappedForEach(isCellAliveInNextGenerationCallback);\n    context.clearRect(0, 0, canvasWidth, canvasHeight);\n    cells.wrappedForEach(drawCellsCallback);\n\n    context.putImageData(\n      new ImageData(\n        new Uint8ClampedArray(\n          imageArray,\n        ),\n        canvasWidth,\n        canvasWidth\n      ), 0, 0\n    );\n\n    // imageArray.length = 0;\n\n    // context.beginPath();\n    // context.fill();\n    clock = currentTime;\n  }\n\n  currentRafId = requestAnimationFrame(drawCallback.bind(null, cells, canvasWidth, canvasHeight));\n  // setTimeout(() => {\n  //   drawCallback(cells, canvasWidth, canvasHeight);\n  // }, frameDuration);\n};\n\nvar firstFrameCallback = (image) => {\n  currentRafId > 0 && cancelAnimationFrame(currentRafId);\n\n  var canvasWidth = getCanvasSide();\n  var canvasHeight = canvasWidth;\n\n  var {\n    widthNum,\n    cellWidth,\n    heightNum,\n    cellHeight,\n    sideDivider,\n  } = updateResolution(canvasWidth, canvasHeight, resolutionInput.value);\n\n  resizeCanvas(canvasWidth, canvasHeight, pr);\n\n  context.drawImage(image, 0, 0, canvasWidth, canvasHeight);\n  var rgbArray = context.getImageData(0, 0, canvasWidth, canvasHeight).data;\n  context.clearRect(0, 0, canvasWidth, canvasHeight);\n  context.fillStyle = \"#f00\";\n\n  var wrappedForEach = initArrayWrappedForEach(widthNum, cellWidth, canvasWidth, heightNum, cellHeight, sideDivider);\n  var cells = generateCellsCallback(rgbArray, widthNum, canvasWidth, heightNum, canvasHeight, sideDivider);\n\n  // Array.prototype.wrappedForEach = wrappedForEach;\n  imageArray = new Uint8ClampedArray(canvasWidth * canvasWidth * 4);\n  Uint8Array.prototype.wrappedForEach = wrappedForEach;\n  drawCallback(cells, canvasWidth, canvasHeight);\n};\n\nvar loadImage = (urlOrData) => {\n  var image = new Image();\n  image.src = urlOrData;\n  currentImage = image;\n\n  image.addEventListener(\"load\", onImageLoaded.bind(null, image), { once: true });\n};\n\nvar onImageLoaded = (image) => {\n  isImageLoaded = true;\n  firstFrameCallback(\n    image\n  );\n};\n\nresolutionInput!.addEventListener(\"change\", () => {\n  onImageLoaded(currentImage);\n});\n\nwindow.addEventListener(\"resize\", () => {\n  firstFrameCallback(currentImage);\n});\n\nconst controls = <HTMLInputElement>document.getElementById(\"controls\");\ncontrols.addEventListener(\"dragover\", () => {\n  controls.classList.add(\"dragover\");\n});\ncontrols.addEventListener(\"dragleave\", () => {\n  controls.classList.remove(\"dragover\");\n});\n\nvar form = <HTMLFormElement>document.getElementById(\"userimageform\");\n\nvar getImageFromInput = () => {\n  var data = new FormData(form);\n  var file = data.get(\"userimage\");\n\n  if (!file || file.name === \"\") {\n    return null;\n  }\n\n  return file;\n};\n\nvar loadImageData = (file) => {\n  const reader = new FileReader();\n\n  reader.readAsDataURL(file);\n  reader.onload = (readerEvent) => {\n    loadImage(readerEvent.target.result);\n  };\n};\n\nform.addEventListener(\"submit\", () => {\n  var file = getImageFromInput();\n  file && loadImageData(file);\n\n  controls.classList.remove(\"dragover\");\n});\n\nvar setup = () => {\n  pr = Math.min(window.devicePixelRatio, 2);\n  var userFile = getImageFromInput();\n  userFile\n    ? loadImageData(userFile)\n    : loadImage(\n      \"./img3.jpg\"\n    );\n};\n\nsetup();\n\nvar userImageInput = <HTMLInputElement>document.getElementById(\"userimage\");\nuserImageInput.addEventListener(\"dragover\", () => {\n  userImageInput.classList.add(\"dragover\");\n});\nuserImageInput.addEventListener(\"dragleave\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});\nuserImageInput.addEventListener(\"drop\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});"],
  "mappings": "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",
  "names": ["initArrayWrappedForEach", "widthNum", "cellWidth", "canvasWidth", "heightNum", "cellHeight", "callback", "i", "j", "rowOffset", "shuffle", "first", "last", "result", "shuffle", "bgc", "canvas", "context", "resolutionInput", "pr", "getCanvasSide", "currentResolution", "currentImage", "isImageLoaded", "updateResolution", "canvasWidth", "canvasHeight", "resolution", "widthNum", "heightNum", "cellWidth", "cellHeight", "sideDivider", "mask", "getColorIndicesByCoordinates", "i", "j", "imageNaturalWidth", "red", "generateCellsCallback", "rgbArray", "_", "cells", "isCellAliveInNextGenerationCallback", "currentIndex", "current", "nc", "colorSet", "palette", "imageArray", "drawCellsCallback", "offsetW", "offsetH", "indices", "currentColor", "resizeCanvas", "width", "height", "clock", "fps", "frameDuration", "currentRafId", "drawCallback", "currentTime", "firstFrameCallback", "image", "wrappedForEach", "initArrayWrappedForEach", "loadImage", "urlOrData", "onImageLoaded", "controls", "form", "getImageFromInput", "data", "file", "loadImageData", "reader", "readerEvent", "setup", "userFile", "userImageInput"]
}
