{
  "version": 3,
  "sources": ["monkeyPatches.ts", "script.ts"],
  "sourcesContent": ["export var initArrayWrappedForEach = (\n  widthNum: number,\n  cellWidth: number,\n  heightNum: number,\n  cellHeight: number,\n): typeof Uint8Array.prototype.wrappedForEach => {\n  return function wrappedForEach(callback) {\n    for (\n      var i = 0, j = 0, rowOffset = 0;\n      i < widthNum && j < heightNum;\n      i + 1 === widthNum\n        ? (i = 0, j++, rowOffset += widthNum)\n        : i++\n    ) {\n      callback({\n        cells: this,\n        currentIndex: i + rowOffset,\n        i,\n        j,\n        widthNum,\n        heightNum,\n        cellWidth,\n        cellHeight,\n      });\n    }\n  };\n};\n\nexport var shuffle = (array, first = 0, last = array.length - 1) => {\n  var result: string[] = [];\n  while(last-- >= first) {\n    const j = Math.floor(Math.random() * (last + 1));\n    [array[last], array[j]] = [array[j], array[last]];\n    result.push(array[last]);\n  }\n  return result;\n};", "import { initArrayWrappedForEach, shuffle } from \"./monkeyPatches.ts\";\n\n/**\n * Canvas\n */\nvar bgc = \"#ebebe1\";\nvar defaultImage = \"./img3.jpg\";\ndocument.body.style.backgroundColor = bgc;\nvar canvas = <HTMLCanvasElement>document.getElementById(\"ca\");\nvar context = <CanvasRenderingContext2D>canvas.getContext(\"2d\", { willReadFrequently: true });\nvar pr = 0;\nvar currentResolution = 0;\nvar palette = shuffle([\n  \"#f0ba00\",\n  \"#de8790\",\n  \"#6b1f1c\",\n  \"#333c7d\",\n  \"#367148\",\n  \"#91b9d6\",\n  \"#aa2404\",\n], 0, 3);\n\n/**\n * Cells\n */\nvar mask = {\n  empty: 0b0,\n  alive: 0b10000,\n  dead: 0b01111,\n  aliveNext: 0b01000,\n  deadNext: 0b10111,\n  n: 0b00111,\n  dropN: 0b11000,\n};\n\n/**\n * Render\n */\nvar clock = Date.now();\nvar fps = 4;\nvar frameDuration = 1000 / fps;\nvar currentRafId = 0;\n\n/**\n * User generated\n */\nvar controls = <HTMLInputElement>document.getElementById(\"controls\");\nvar userImageInput = <HTMLInputElement>document.getElementById(\"userimage\");\nvar form = <HTMLFormElement>document.getElementById(\"userimageform\");\nvar resolutionInput = <HTMLInputElement>document.getElementById(\"resolution\");\nvar currentImage: HTMLImageElement | null = null;\nvar isImageLoaded = false;\n\nvar getCanvasSide = () => (\n  window.innerWidth < window.innerHeight\n    ? window.innerWidth * pr\n    : window.innerHeight * pr\n);\n\nvar updateResolution = (canvasWidth, canvasHeight, resolution) => {\n  currentResolution = Number(resolution);\n\n  var widthNum = currentResolution;\n  var heightNum = currentResolution;\n\n  var cellWidth = canvasWidth / widthNum;\n  var cellHeight = canvasHeight / heightNum;\n\n  var sideDivider = isImageLoaded === false\n    ? 1\n    : currentResolution / canvasWidth;\n\n  return {\n    widthNum,\n    cellWidth,\n    heightNum,\n    cellHeight,\n    sideDivider,\n  };\n};\n\nvar getColorIndicesByCoordinates = (i, j, imageNaturalWidth) => {\n  var red = j * (imageNaturalWidth * 4) + i * 4;\n  return [red, red + 1, red + 2, red + 3];\n};\n\nvar generateCells = (rgbArray, widthNum, canvasWidth, heightNum, _, sideDivider) => {\n  var i = 0;\n  var j = 0;\n\n  var cells = new Uint8Array(\n    Array.from(\n      { length: widthNum * heightNum },\n      () => {\n        i + 1 === widthNum\n          ? (i = 0, j++)\n          : i++;\n\n        return rgbArray[getColorIndicesByCoordinates(\n          Math.floor(i / sideDivider),\n          Math.floor(j / sideDivider),\n          canvasWidth,\n        )[0]] < 129\n          ? mask.alive\n          : mask.empty;\n      }\n    )\n  );\n\n  return cells;\n};\n\nvar isCellAliveInNextGenerationCallback = ({\n  cells,\n  currentIndex,\n  i,\n  j,\n  widthNum,\n  heightNum,\n}) => {\n  var current = cells[currentIndex];\n\n  var n = 0;\n\n  ((i - 1) > 0\n      && cells[currentIndex - 1] & mask.alive)\n      && n++;\n\n  ((i + 1) < widthNum\n      && cells[currentIndex + 1] & mask.alive)\n      && n++;\n\n  ((j - 1) > 0\n      && cells[currentIndex - widthNum] & mask.alive)\n      && n++;\n\n  ((j + 1) < heightNum\n      && cells[currentIndex + widthNum] & mask.alive)\n      && n++;\n\n  cells[currentIndex] = (\n    (n === 1 || n === 3)\n      ? current | mask.aliveNext\n      : current & mask.deadNext\n  ) | n;\n};\n\nvar drawCellsCallback = ({\n  currentIndex,\n  cells,\n  cellWidth,\n  cellHeight,\n  i,\n  j,\n}) => {\n  var current = cells[currentIndex];\n\n  current & mask.alive\n  && (\n    context.fillStyle = palette[(current & mask.n) - 1],\n    context.fillRect(\n      i * cellWidth,\n      j * cellHeight,\n      cellWidth,\n      cellHeight\n    )\n  );\n\n  cells[currentIndex] =\n    (current & mask.aliveNext)\n      ? (current | mask.alive) & mask.dropN\n      : mask.empty;\n};\n\nvar resizeCanvas = (width, height, pr) => {\n  canvas.width = width;\n  canvas.height = height;\n  canvas.style.width = width / pr + \"px\";\n  canvas.style.height = height / pr + \"px\";\n};\n\nvar tick = (cells, canvasWidth, canvasHeight) => {\n  var currentTime = Date.now();\n\n  if (currentTime - clock >= frameDuration) {\n    cells.wrappedForEach(isCellAliveInNextGenerationCallback);\n    context.clearRect(0, 0, canvasWidth, canvasHeight);\n    cells.wrappedForEach(drawCellsCallback);\n    clock = currentTime;\n  }\n\n  currentRafId = requestAnimationFrame(\n    tick.bind(\n      null,\n      cells,\n      canvasWidth,\n      canvasHeight\n    ));\n};\n\nvar processFirstFrame = (image) => {\n  currentRafId > 0 && cancelAnimationFrame(currentRafId);\n\n  var canvasWidth = getCanvasSide();\n  var canvasHeight = canvasWidth;\n\n  var {\n    widthNum,\n    cellWidth,\n    heightNum,\n    cellHeight,\n    sideDivider,\n  } = updateResolution(canvasWidth, canvasHeight, resolutionInput.value);\n\n  resizeCanvas(canvasWidth, canvasHeight, pr);\n\n  context.drawImage(image, 0, 0, canvasWidth, canvasHeight);\n  var rgbArray = context.getImageData(0, 0, canvasWidth, canvasHeight).data;\n  context.clearRect(0, 0, canvasWidth, canvasHeight);\n  context.fillStyle = \"#f00\";\n\n  var wrappedForEach = initArrayWrappedForEach(widthNum, cellWidth, heightNum, cellHeight);\n  var cells = generateCells(rgbArray, widthNum, canvasWidth, heightNum, canvasHeight, sideDivider);\n\n  Uint8Array.prototype.wrappedForEach = wrappedForEach;\n  tick(cells, canvasWidth, canvasHeight);\n};\n\nvar loadImage = (urlOrData) => {\n  var image = new Image();\n  image.src = urlOrData;\n  currentImage = image;\n\n  image.addEventListener(\"load\", onImageLoaded.bind(null, image), { once: true });\n};\n\nvar onImageLoaded = (image) => {\n  isImageLoaded = true;\n  processFirstFrame(\n    image\n  );\n};\n\nresolutionInput!.addEventListener(\"change\", () => {\n  onImageLoaded(currentImage);\n});\n\nwindow.addEventListener(\"resize\", () => {\n  processFirstFrame(currentImage);\n});\n\ncontrols.addEventListener(\"dragover\", () => {\n  controls.classList.add(\"dragover\");\n});\n\ncontrols.addEventListener(\"dragleave\", () => {\n  controls.classList.remove(\"dragover\");\n});\n\nvar getImageFromInput = () => {\n  var data = new FormData(form);\n  var file = data.get(\"userimage\");\n\n  if (!file || file.name === \"\") {\n    return null;\n  }\n\n  return file;\n};\n\nvar loadImageData = (file) => {\n  var reader = new FileReader();\n\n  reader.readAsDataURL(file);\n  reader.onload = (readerEvent) => {\n    loadImage(readerEvent.target.result);\n  };\n};\n\nform.addEventListener(\"submit\", () => {\n  var file = getImageFromInput();\n  file && loadImageData(file);\n\n  controls.classList.remove(\"dragover\");\n});\n\nvar setup = () => {\n  pr = Math.min(window.devicePixelRatio, 2);\n  var userFile = getImageFromInput();\n  userFile\n    ? loadImageData(userFile)\n    : loadImage(\n      defaultImage\n    );\n};\n\nuserImageInput.addEventListener(\"dragover\", () => {\n  userImageInput.classList.add(\"dragover\");\n});\n\nuserImageInput.addEventListener(\"dragleave\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});\n\nuserImageInput.addEventListener(\"drop\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});\n\nsetup();\n"],
  "mappings": "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",
  "names": ["initArrayWrappedForEach", "widthNum", "cellWidth", "heightNum", "cellHeight", "callback", "i", "j", "rowOffset", "shuffle", "array", "first", "last", "result", "bgc", "defaultImage", "canvas", "context", "pr", "currentResolution", "palette", "shuffle", "mask", "clock", "fps", "frameDuration", "currentRafId", "controls", "userImageInput", "form", "resolutionInput", "currentImage", "isImageLoaded", "getCanvasSide", "updateResolution", "canvasWidth", "canvasHeight", "resolution", "widthNum", "heightNum", "cellWidth", "cellHeight", "sideDivider", "getColorIndicesByCoordinates", "i", "j", "imageNaturalWidth", "red", "generateCells", "rgbArray", "_", "cells", "isCellAliveInNextGenerationCallback", "currentIndex", "current", "n", "drawCellsCallback", "resizeCanvas", "width", "height", "tick", "currentTime", "processFirstFrame", "image", "wrappedForEach", "initArrayWrappedForEach", "loadImage", "urlOrData", "onImageLoaded", "getImageFromInput", "data", "file", "loadImageData", "reader", "readerEvent", "setup", "userFile"]
}
