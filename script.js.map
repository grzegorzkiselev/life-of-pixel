{
  "version": 3,
  "sources": ["script.ts"],
  "sourcesContent": ["/**\n * Canvas\n */\nvar canvas = <HTMLCanvasElement>document.getElementById(\"ca\");\nvar bgc = \"#ebebe1\";\ndocument.body.style.backgroundColor = bgc;\nvar defaultImage = \"./img3.jpg\";\nvar pr = Math.min(window.devicePixelRatio, 2);\n\n/**\n * Worker\n */\nvar worker = new Worker(\"./worker.js\");\n\n/**\n * User generated\n */\nvar controls = <HTMLInputElement>document.getElementById(\"controls\");\nvar userImageInput = <HTMLInputElement>document.getElementById(\"userimage\");\nvar form = <HTMLFormElement>document.getElementById(\"userimageform\");\nvar resolutionInput = <HTMLInputElement>document.getElementById(\"resolution\");\nvar currentImage: ImageBitmap | null = null;\n\nvar getCanvasSide = (pr) => (\n  window.innerWidth < window.innerHeight\n    ? window.innerWidth * pr\n    : window.innerHeight * pr\n);\n\nvar resizeCanvas = (canvas, width, height, pr) => {\n  canvas.style.width = width / pr + \"px\";\n  canvas.style.height = height / pr + \"px\";\n};\n\nvar prepareDataForWorker = (image) => {\n  // const side = canvasHeight = canvasWidth = getCanvasSide();\n  //   p.resizeCanvas(side, side);\n  //   cellWidth = canvasWidth / widthCount;\n  //   cellHeight = canvasHeight / heightCount;\n  var canvasWidth = getCanvasSide(pr);\n  var canvasHeight = canvasWidth;\n  var resolution = Number(resolutionInput.value);\n\n  resizeCanvas(canvas, canvasWidth, canvasHeight, pr);\n\n  worker.postMessage({\n    message: \"processFirstFrame\",\n    image,\n    canvasWidth,\n    canvasHeight,\n    resolution\n  });\n};\n\nvar onImageLoaded = (image) => {\n  createImageBitmap(image)\n    .then((bitmap) => {\n      currentImage = bitmap;\n      prepareDataForWorker(bitmap);\n    });\n};\n\nvar loadImage = (urlOrData) => {\n  var image = new Image();\n  image.src = urlOrData;\n\n  image.addEventListener(\"load\", onImageLoaded.bind(null, image), { once: true });\n};\n\nvar loadImageData = (file) => {\n  var reader = new FileReader();\n\n  reader.readAsDataURL(file);\n  reader.onload = (readerEvent) => {\n    loadImage(readerEvent.target.result);\n  };\n};\n\nvar getImageFromInput = () => {\n  var data = new FormData(form);\n  var file = data.get(\"userimage\");\n\n  if (!file || file.name === \"\") {\n    return null;\n  }\n\n  return file;\n};\n\nform.addEventListener(\"submit\", () => {\n  var file = getImageFromInput();\n  file && loadImageData(file);\n\n  controls.classList.remove(\"dragover\");\n});\n\nresolutionInput!.addEventListener(\"change\", () => {\n  prepareDataForWorker(currentImage);\n});\n\nwindow.addEventListener(\"resize\", () => {\n  prepareDataForWorker(currentImage);\n});\n\ncontrols.addEventListener(\"dragover\", () => {\n  controls.classList.add(\"dragover\");\n});\n\ncontrols.addEventListener(\"dragleave\", () => {\n  controls.classList.remove(\"dragover\");\n});\n\nuserImageInput.addEventListener(\"dragover\", () => {\n  userImageInput.classList.add(\"dragover\");\n});\n\nuserImageInput.addEventListener(\"dragleave\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});\n\nuserImageInput.addEventListener(\"drop\", () => {\n  userImageInput.classList.remove(\"dragover\");\n});\n\nvar setup = () => {\n  var osc = canvas.transferControlToOffscreen();\n\n  worker.postMessage({\n    message: \"initCanvas\",\n    canvas: osc,\n  }, [osc]);\n\n  var userFile = getImageFromInput();\n  userFile\n    ? loadImageData(userFile)\n    : loadImage(\n      defaultImage\n    );\n};\nsetup();"],
  "mappings": "MAGA,IAAIA,EAA4B,SAAS,eAAe,IAAI,EACxDC,EAAM,UACV,SAAS,KAAK,MAAM,gBAAkBA,EACtC,IAAIC,EAAe,aACfC,EAAK,KAAK,IAAI,OAAO,iBAAkB,CAAC,EAKxCC,EAAS,IAAI,OAAO,aAAa,EAKjCC,EAA6B,SAAS,eAAe,UAAU,EAC/DC,EAAmC,SAAS,eAAe,WAAW,EACtEC,EAAwB,SAAS,eAAe,eAAe,EAC/DC,EAAoC,SAAS,eAAe,YAAY,EACxEC,EAAmC,KAEnCC,EAAiBP,GACnB,OAAO,WAAa,OAAO,YACvB,OAAO,WAAaA,EACpB,OAAO,YAAcA,EAGvBQ,EAAe,CAACX,EAAQY,EAAOC,EAAQV,IAAO,CAChDH,EAAO,MAAM,MAAQY,EAAQT,EAAK,KAClCH,EAAO,MAAM,OAASa,EAASV,EAAK,IACtC,EAEIW,EAAwBC,GAAU,CAKpC,IAAIC,EAAcN,EAAcP,CAAE,EAC9Bc,EAAeD,EACfE,EAAa,OAAOV,EAAgB,KAAK,EAE7CG,EAAaX,EAAQgB,EAAaC,EAAcd,CAAE,EAElDC,EAAO,YAAY,CACjB,QAAS,oBACT,MAAAW,EACA,YAAAC,EACA,aAAAC,EACA,WAAAC,CACF,CAAC,CACH,EAEIC,EAAiBJ,GAAU,CAC7B,kBAAkBA,CAAK,EACpB,KAAMK,GAAW,CAChBX,EAAeW,EACfN,EAAqBM,CAAM,CAC7B,CAAC,CACL,EAEIC,EAAaC,GAAc,CAC7B,IAAIP,EAAQ,IAAI,MAChBA,EAAM,IAAMO,EAEZP,EAAM,iBAAiB,OAAQI,EAAc,KAAK,KAAMJ,CAAK,EAAG,CAAE,KAAM,EAAK,CAAC,CAChF,EAEIQ,EAAiBC,GAAS,CAC5B,IAAIC,EAAS,IAAI,WAEjBA,EAAO,cAAcD,CAAI,EACzBC,EAAO,OAAUC,GAAgB,CAC/BL,EAAUK,EAAY,OAAO,MAAM,CACrC,CACF,EAEIC,EAAoB,IAAM,CAC5B,IAAIC,EAAO,IAAI,SAASrB,CAAI,EACxBiB,EAAOI,EAAK,IAAI,WAAW,EAE/B,MAAI,CAACJ,GAAQA,EAAK,OAAS,GAClB,KAGFA,CACT,EAEAjB,EAAK,iBAAiB,SAAU,IAAM,CACpC,IAAIiB,EAAOG,EAAkB,EAC7BH,GAAQD,EAAcC,CAAI,EAE1BnB,EAAS,UAAU,OAAO,UAAU,CACtC,CAAC,EAEDG,EAAiB,iBAAiB,SAAU,IAAM,CAChDM,EAAqBL,CAAY,CACnC,CAAC,EAED,OAAO,iBAAiB,SAAU,IAAM,CACtCK,EAAqBL,CAAY,CACnC,CAAC,EAEDJ,EAAS,iBAAiB,WAAY,IAAM,CAC1CA,EAAS,UAAU,IAAI,UAAU,CACnC,CAAC,EAEDA,EAAS,iBAAiB,YAAa,IAAM,CAC3CA,EAAS,UAAU,OAAO,UAAU,CACtC,CAAC,EAEDC,EAAe,iBAAiB,WAAY,IAAM,CAChDA,EAAe,UAAU,IAAI,UAAU,CACzC,CAAC,EAEDA,EAAe,iBAAiB,YAAa,IAAM,CACjDA,EAAe,UAAU,OAAO,UAAU,CAC5C,CAAC,EAEDA,EAAe,iBAAiB,OAAQ,IAAM,CAC5CA,EAAe,UAAU,OAAO,UAAU,CAC5C,CAAC,EAED,IAAIuB,EAAQ,IAAM,CAChB,IAAIC,EAAM9B,EAAO,2BAA2B,EAE5CI,EAAO,YAAY,CACjB,QAAS,aACT,OAAQ0B,CACV,EAAG,CAACA,CAAG,CAAC,EAER,IAAIC,EAAWJ,EAAkB,EACjCI,EACIR,EAAcQ,CAAQ,EACtBV,EACAnB,CACF,CACJ,EACA2B,EAAM",
  "names": ["canvas", "bgc", "defaultImage", "pr", "worker", "controls", "userImageInput", "form", "resolutionInput", "currentImage", "getCanvasSide", "resizeCanvas", "width", "height", "prepareDataForWorker", "image", "canvasWidth", "canvasHeight", "resolution", "onImageLoaded", "bitmap", "loadImage", "urlOrData", "loadImageData", "file", "reader", "readerEvent", "getImageFromInput", "data", "setup", "osc", "userFile"]
}
